ll a[N], lg[N], mn[N][30];

ll get(ll l, ll r) {
    if(l > r) swap(l, r);
	ll k = lg[r - l + 1];
	return min(mn[l][k], mn[r - (1 << k) + 1][k]);
}

void solve() {
    ll n, m, l, r;
    cin >> n >> m;

    for(ll i = 2; i <= n; i++) {
        cin >> a[i];
        mn[i][0] = a[i];
    }

    for(ll i = 2; i <= n; i++) lg[i] = lg[i / 2] + 1;

    for(ll j = 1; j <= 18; j++) {
        for(ll l = 1; l + (1 << j) - 1 <= n; l++) {
            ll r = l + (1 << (j - 1));
            mn[l][j] = min(mn[l][j - 1], mn[r][j - 1]);
        }
    }
    while(m--) {
        cin >> l >> r;
        cout << get(l, r) << "\n";
    }
}
